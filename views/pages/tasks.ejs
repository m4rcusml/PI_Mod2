<style>
    /* Tasks page specific styles */
    .tasks-container {
        padding: 24px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .page-header {
        margin-bottom: 32px;
    }

    .page-title {
        font-size: 32px;
        font-weight: 700;
        color: var(--foreground-color);
        margin-bottom: 8px;
    }

    .page-subtitle {
        font-size: 16px;
        color: #6b7280;
    }

    .user-info {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 24px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .user-welcome {
        font-size: 16px;
        font-weight: 600;
        color: var(--foreground-color);
    }

    .back-button {
        background: transparent;
        color: var(--primary-color);
        border: none;
        font-size: 14px;
        cursor: pointer;
        text-decoration: underline;
    }

    .back-button:hover {
        color: #4f46e5;
    }

    .tasks-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        gap: 16px;
    }

    .search-filter {
        display: flex;
        gap: 16px;
        align-items: center;
        flex: 1;
    }

    .search-input {
        flex: 1;
        max-width: 400px;
        padding: 12px 16px;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        font-size: 16px;
        background: var(--card-color);
        color: var(--foreground-color);
    }

    .search-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(136, 59, 238, 0.1);
    }

    .filter-select {
        padding: 12px 16px;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        font-size: 16px;
        background: var(--card-color);
        color: var(--foreground-color);
        min-width: 150px;
    }

    .filter-select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(136, 59, 238, 0.1);
    }

    .add-task-button {
        background: linear-gradient(135deg, var(--primary-color) 0%, #4f46e5 100%);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        white-space: nowrap;
    }

    .add-task-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(136, 59, 238, 0.3);
    }

    .tasks-list {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        overflow: hidden;
    }

    .task-item {
        display: grid;
        grid-template-columns: auto 1fr auto auto auto;
        gap: 16px;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid var(--border-color);
        transition: background-color 0.2s ease;
    }

    .task-item:last-child {
        border-bottom: none;
    }

    .task-item:hover {
        background: var(--background-color);
    }

    .task-checkbox {
        width: 24px;
        height: 24px;
        border: 2px solid var(--primary-color);
        border-radius: 6px;
        background: transparent;
        cursor: pointer;
        position: relative;
        flex-shrink: 0;
    }

    .task-checkbox.completed {
        background: var(--primary-color);
    }

    .task-checkbox.completed::after {
        content: '✓';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 14px;
        font-weight: bold;
    }

    .task-content {
        min-width: 0;
    }

    .task-title {
        font-weight: 600;
        font-size: 16px;
        margin-bottom: 4px;
        color: var(--foreground-color);
    }

    .task-description {
        font-size: 14px;
        color: #9ca3af;
        line-height: 1.4;
    }

    .task-tags {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }

    .task-tag {
        background: var(--border-color);
        color: var(--foreground-color);
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
        white-space: nowrap;
    }

    .task-tag.category {
        background: var(--primary-color);
        color: white;
    }

    .task-date {
        color: var(--foreground-color);
        font-size: 14px;
        white-space: nowrap;
    }

    .task-actions {
        display: flex;
        gap: 8px;
    }

    .action-button {
        background: transparent;
        border: 1px solid var(--border-color);
        color: var(--foreground-color);
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s ease;
    }

    .action-button:hover {
        border-color: var(--primary-color);
        color: var(--primary-color);
    }

    .action-button.delete {
        border-color: #dc3545;
        color: #dc3545;
    }

    .action-button.delete:hover {
        background: #dc3545;
        color: white;
    }

    .empty-state {
        text-align: center;
        color: #6b7280;
        padding: 60px 20px;
    }

    .empty-state h3 {
        font-size: 18px;
        margin-bottom: 8px;
        color: var(--foreground-color);
    }

    .loading-state {
        text-align: center;
        color: var(--primary-color);
        font-weight: 500;
        padding: 60px 20px;
    }

    .error-message {
        background: #fee2e2;
        border: 1px solid #fecaca;
        color: #dc2626;
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 16px;
    }

    .tasks-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .stat-card {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 16px;
        text-align: center;
    }

    .stat-number {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 4px;
    }

    .stat-label {
        font-size: 14px;
        color: #9ca3af;
    }

    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .tasks-container {
            padding: 16px;
        }

        .tasks-controls {
            flex-direction: column;
            align-items: stretch;
        }

        .search-filter {
            flex-direction: column;
        }

        .search-input {
            max-width: none;
        }

        .task-item {
            grid-template-columns: auto 1fr;
            gap: 12px;
        }

        .task-tags,
        .task-date,
        .task-actions {
            grid-column: 1 / -1;
            margin-top: 8px;
        }

        .page-title {
            font-size: 28px;
        }
    }
</style>

<div class="tasks-container">
    <!-- User Info -->
    <div class="user-info">
        <div class="user-welcome" id="userWelcome">Carregando...</div>
        <button class="back-button" onclick="goBack()">← Voltar para Home</button>
    </div>

    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">Tarefas</h1>
        <p class="page-subtitle">Gerencie todas as suas tarefas em um só lugar</p>
    </div>

    <!-- Error Message -->
    <div class="error-message" id="errorMessage" style="display: none;"></div>

    <!-- Tasks Stats -->
    <div class="tasks-stats" id="tasksStats">
        <div class="stat-card">
            <div class="stat-number" id="totalTasks">0</div>
            <div class="stat-label">Total de Tarefas</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="pendingTasks">0</div>
            <div class="stat-label">Pendentes</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="completedTasks">0</div>
            <div class="stat-label">Concluídas</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="overdueTasks">0</div>
            <div class="stat-label">Atrasadas</div>
        </div>
    </div>

    <!-- Tasks Controls -->
    <div class="tasks-controls">
        <div class="search-filter">
            <input type="text" class="search-input" id="searchInput" placeholder="Buscar tarefas...">
            <select class="filter-select" id="stateFilter">
                <option value="">Todos os estados</option>
            </select>
            <select class="filter-select" id="categoryFilter">
                <option value="">Todas as categorias</option>
            </select>
        </div>
        <button class="add-task-button" onclick="createTask()">
            + Nova Tarefa
        </button>
    </div>

    <!-- Tasks List -->
    <div class="tasks-list" id="tasksList">
        <div class="loading-state">
            Carregando tarefas...
        </div>
    </div>
</div>

<script>
    // Global variables
    let currentUserName = null;
    let allTasks = [];
    let filteredTasks = [];
    let states = [];
    let categories = [];

    // Initialize user from localStorage
    function initializeUser() {
        currentUserName = localStorage.getItem('userName');
        
        if (!currentUserName) {
            window.location.href = '/login';
            return;
        }

        document.getElementById('userWelcome').textContent = `Tarefas de: ${currentUserName}`;
    }

    // Show error message
    function showError(message) {
        const errorElement = document.getElementById('errorMessage');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    // Hide error message
    function hideError() {
        document.getElementById('errorMessage').style.display = 'none';
    }

    // Fetch tasks from API
    async function fetchTasks() {
        try {
            if (!currentUserName) {
                showError('Usuário não identificado');
                return;
            }

            const url = `/api/tasks?user_name=${encodeURIComponent(currentUserName)}`;
            console.log('Fazendo requisição para:', url);
            
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status}`);
            }
            
            allTasks = await response.json();
            console.log('Tarefas recebidas:', allTasks);
            
            filteredTasks = [...allTasks];
            hideError();
            updateStats();
            renderTasks();

        } catch (error) {
            console.error('Erro ao carregar tarefas:', error);
            showError('Erro ao carregar tarefas: ' + error.message);
        }
    }

    // Fetch states and categories for filters
    async function fetchFilters() {
        try {
            // Fetch states
            const statesResponse = await fetch('/api/states');
            if (statesResponse.ok) {
                states = await statesResponse.json();
                populateStateFilter();
            }

            // Fetch categories
            const categoriesResponse = await fetch('/api/categories');
            if (categoriesResponse.ok) {
                categories = await categoriesResponse.json();
                populateCategoryFilter();
            }

        } catch (error) {
            console.error('Erro ao carregar filtros:', error);
        }
    }

    // Populate state filter dropdown
    function populateStateFilter() {
        const stateFilter = document.getElementById('stateFilter');
        stateFilter.innerHTML = '<option value="">Todos os estados</option>';
        
        states.forEach(state => {
            const option = document.createElement('option');
            option.value = state.name;
            option.textContent = state.name;
            stateFilter.appendChild(option);
        });
    }

    // Populate category filter dropdown
    function populateCategoryFilter() {
        const categoryFilter = document.getElementById('categoryFilter');
        categoryFilter.innerHTML = '<option value="">Todas as categorias</option>';
        
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category.name;
            option.textContent = category.name;
            categoryFilter.appendChild(option);
        });
    }

    // Update statistics
    function updateStats() {
        const total = allTasks.length;
        const completed = allTasks.filter(task => 
            task.state_name && task.state_name.toLowerCase().includes('concluí')
        ).length;
        const pending = total - completed;
        
        const today = new Date();
        const overdue = allTasks.filter(task => {
            if (!task.due_date) return false;
            const dueDate = new Date(task.due_date);
            return dueDate < today && !task.state_name?.toLowerCase().includes('concluí');
        }).length;

        document.getElementById('totalTasks').textContent = total;
        document.getElementById('pendingTasks').textContent = pending;
        document.getElementById('completedTasks').textContent = completed;
        document.getElementById('overdueTasks').textContent = overdue;
    }

    // Filter tasks
    function filterTasks() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const stateFilter = document.getElementById('stateFilter').value;
        const categoryFilter = document.getElementById('categoryFilter').value;

        filteredTasks = allTasks.filter(task => {
            const matchesSearch = !searchTerm || 
                task.title.toLowerCase().includes(searchTerm) ||
                (task.description && task.description.toLowerCase().includes(searchTerm));
            
            const matchesState = !stateFilter || task.state_name === stateFilter;
            const matchesCategory = !categoryFilter || task.category_name === categoryFilter;

            return matchesSearch && matchesState && matchesCategory;
        });

        renderTasks();
    }

    // Render tasks list
    function renderTasks() {
        const tasksList = document.getElementById('tasksList');

        if (filteredTasks.length === 0) {
            tasksList.innerHTML = `
                <div class="empty-state">
                    <h3>Nenhuma tarefa encontrada</h3>
                    <p>Tente ajustar os filtros ou criar uma nova tarefa</p>
                </div>
            `;
            return;
        }

        tasksList.innerHTML = filteredTasks.map(task => {
            const isCompleted = task.state_name && task.state_name.toLowerCase().includes('concluí');
            const dueDate = task.due_date ? new Date(task.due_date).toLocaleDateString('pt-BR') : null;
            const description = task.description ? 
                (task.description.length > 100 ? task.description.substring(0, 100) + '...' : task.description) : '';

            return `
                <div class="task-item">
                    <div class="task-checkbox ${isCompleted ? 'completed' : ''}" 
                         onclick="toggleTask(${task.id})"></div>
                    
                    <div class="task-content">
                        <div class="task-title">${task.title}</div>
                        ${description ? `<div class="task-description">${description}</div>` : ''}
                    </div>
                    
                    <div class="task-tags">
                        ${task.category_name ? `<span class="task-tag category">${task.category_name}</span>` : ''}
                        ${task.state_name ? `<span class="task-tag">${task.state_name}</span>` : ''}
                    </div>
                    
                    <div class="task-date">
                        ${dueDate || 'Sem prazo'}
                    </div>
                    
                    <div class="task-actions">
                        <button class="action-button" onclick="editTask(${task.id})">Editar</button>
                        <button class="action-button delete" onclick="deleteTask(${task.id})">Excluir</button>
                    </div>
                </div>
            `;
        }).join('');
    }

    // Toggle task completion
    async function toggleTask(taskId) {
        try {
            const task = allTasks.find(t => t.id === taskId);
            if (!task) return;

            // Find completed state
            const completedState = states.find(s => s.name.toLowerCase().includes('concluí'));
            const pendingState = states.find(s => s.name.toLowerCase().includes('pendent'));
            
            const isCurrentlyCompleted = task.state_name && task.state_name.toLowerCase().includes('concluí');
            const newStateId = isCurrentlyCompleted ? 
                (pendingState ? pendingState.id : null) : 
                (completedState ? completedState.id : null);

            if (!newStateId) {
                showError('Estado não encontrado para alternar tarefa');
                return;
            }

            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ...task,
                    state_id: newStateId
                })
            });

            if (!response.ok) {
                throw new Error('Erro ao atualizar tarefa');
            }

            // Refresh tasks
            await fetchTasks();

        } catch (error) {
            console.error('Erro ao alternar tarefa:', error);
            showError('Erro ao atualizar tarefa: ' + error.message);
        }
    }

    // Edit task
    function editTask(taskId) {
        if (currentUserName) {
            window.location.href = `/tasks/${taskId}/edit?userName=${encodeURIComponent(currentUserName)}`;
        }
    }

    // Delete task
    async function deleteTask(taskId) {
        if (!confirm('Tem certeza que deseja excluir esta tarefa?')) {
            return;
        }

        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('Erro ao excluir tarefa');
            }

            // Refresh tasks
            await fetchTasks();

        } catch (error) {
            console.error('Erro ao excluir tarefa:', error);
            showError('Erro ao excluir tarefa: ' + error.message);
        }
    }

    // Create new task
    function createTask() {
        if (currentUserName) {
            window.location.href = `/new-task?userName=${encodeURIComponent(currentUserName)}`;
        } else {
            window.location.href = '/login';
        }
    }

    // Navigation functions
    function goBack() {
        if (currentUserName) {
            window.location.href = `/home?userName=${encodeURIComponent(currentUserName)}`;
        } else {
            window.location.href = '/login';
        }
    }

    // Event listeners
    document.getElementById('searchInput').addEventListener('input', filterTasks);
    document.getElementById('stateFilter').addEventListener('change', filterTasks);
    document.getElementById('categoryFilter').addEventListener('change', filterTasks);

    // Initialize page
    document.addEventListener('DOMContentLoaded', async function() {
        initializeUser();
        await fetchFilters();
        await fetchTasks();
    });
</script>

