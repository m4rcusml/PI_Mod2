<style>
    /* Profile page specific styles */
    .profile-container {
        padding: 24px;
        max-width: 800px;
        margin: 0 auto;
    }

    .page-header {
        margin-bottom: 32px;
    }

    .page-title {
        font-size: 32px;
        font-weight: 700;
        color: var(--foreground-color);
        margin-bottom: 8px;
    }

    .page-subtitle {
        font-size: 16px;
        color: #6b7280;
    }

    .user-info {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 24px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .user-welcome {
        font-size: 16px;
        font-weight: 600;
        color: var(--foreground-color);
    }

    .back-button {
        background: transparent;
        color: var(--primary-color);
        border: none;
        font-size: 14px;
        cursor: pointer;
        text-decoration: underline;
    }

    .back-button:hover {
        color: #4f46e5;
    }

    .profile-content {
        display: grid;
        gap: 24px;
    }

    .profile-card {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 24px;
    }

    .card-title {
        font-size: 20px;
        font-weight: 600;
        color: var(--foreground-color);
        margin-bottom: 16px;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .card-icon {
        width: 24px;
        height: 24px;
        color: var(--primary-color);
    }

    .profile-avatar {
        display: flex;
        align-items: center;
        gap: 20px;
        margin-bottom: 24px;
    }

    .avatar-circle {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary-color) 0%, #4f46e5 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
        font-weight: 700;
        color: white;
    }

    .avatar-info h3 {
        font-size: 24px;
        font-weight: 600;
        color: var(--foreground-color);
        margin-bottom: 4px;
    }

    .avatar-info p {
        color: #9ca3af;
        font-size: 16px;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .stat-item {
        text-align: center;
        padding: 16px;
        background: var(--background-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
    }

    .stat-number {
        font-size: 24px;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 4px;
    }

    .stat-label {
        font-size: 14px;
        color: #9ca3af;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: var(--foreground-color);
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-input {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        background: var(--background-color);
        color: var(--foreground-color);
        box-sizing: border-box;
    }

    .form-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(136, 59, 238, 0.1);
    }

    .form-input:disabled {
        background-color: var(--border-color);
        color: #6b7280;
        cursor: not-allowed;
    }

    .button-group {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color) 0%, #4f46e5 100%);
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(136, 59, 238, 0.3);
    }

    .btn-secondary {
        background: transparent;
        color: #6b7280;
        border: 2px solid var(--border-color);
    }

    .btn-secondary:hover {
        border-color: #6b7280;
        color: var(--foreground-color);
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .activity-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px;
        background: var(--background-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
    }

    .activity-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 14px;
        flex-shrink: 0;
    }

    .activity-content {
        flex: 1;
    }

    .activity-text {
        font-size: 14px;
        color: var(--foreground-color);
        margin-bottom: 2px;
    }

    .activity-time {
        font-size: 12px;
        color: #9ca3af;
    }

    .preferences-grid {
        display: grid;
        gap: 16px;
    }

    .preference-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        background: var(--background-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
    }

    .preference-info h4 {
        font-size: 16px;
        font-weight: 600;
        color: var(--foreground-color);
        margin-bottom: 4px;
    }

    .preference-info p {
        font-size: 14px;
        color: #9ca3af;
    }

    .toggle-switch {
        position: relative;
        width: 50px;
        height: 24px;
        background: var(--border-color);
        border-radius: 12px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .toggle-switch.active {
        background: var(--primary-color);
    }

    .toggle-switch::after {
        content: '';
        position: absolute;
        top: 2px;
        left: 2px;
        width: 20px;
        height: 20px;
        background: white;
        border-radius: 50%;
        transition: transform 0.2s ease;
    }

    .toggle-switch.active::after {
        transform: translateX(26px);
    }

    .error-message {
        background: #fee2e2;
        border: 1px solid #fecaca;
        color: #dc2626;
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 16px;
    }

    .success-message {
        background: #d1fae5;
        border: 1px solid #a7f3d0;
        color: #065f46;
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 16px;
    }

    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .profile-container {
            padding: 16px;
        }

        .profile-avatar {
            flex-direction: column;
            text-align: center;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .button-group {
            flex-direction: column;
        }

        .page-title {
            font-size: 28px;
        }
    }
</style>

<div class="profile-container">
    <!-- User Info -->
    <div class="user-info">
        <div class="user-welcome" id="userWelcome">Carregando...</div>
        <button class="back-button" onclick="goBack()">← Voltar para Home</button>
    </div>

    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">Perfil</h1>
        <p class="page-subtitle">Gerencie suas informações pessoais e preferências</p>
    </div>

    <!-- Error/Success Messages -->
    <div class="error-message" id="errorMessage" style="display: none;"></div>
    <div class="success-message" id="successMessage" style="display: none;"></div>

    <div class="profile-content">
        <!-- Profile Info Card -->
        <div class="profile-card">
            <div class="card-title">
                <svg class="card-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                </svg>
                Informações Pessoais
            </div>

            <div class="profile-avatar">
                <div class="avatar-circle" id="avatarCircle">
                    U
                </div>
                <div class="avatar-info">
                    <h3 id="profileName">Usuário</h3>
                    <p>Membro desde hoje</p>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number" id="totalTasksStat">0</div>
                    <div class="stat-label">Total de Tarefas</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="completedTasksStat">0</div>
                    <div class="stat-label">Concluídas</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="pendingTasksStat">0</div>
                    <div class="stat-label">Pendentes</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="categoriesStat">0</div>
                    <div class="stat-label">Categorias</div>
                </div>
            </div>

            <form id="profileForm">
                <div class="form-group">
                    <label for="userName" class="form-label">Nome de Usuário</label>
                    <input type="text" id="userName" class="form-input" disabled>
                </div>

                <div class="form-group">
                    <label for="userEmail" class="form-label">E-mail</label>
                    <input type="email" id="userEmail" class="form-input" placeholder="seu@email.com">
                </div>

                <div class="button-group">
                    <button type="button" class="btn btn-secondary" onclick="resetForm()">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Salvar Alterações</button>
                </div>
            </form>
        </div>

        <!-- Activity Card -->
        <div class="profile-card">
            <div class="card-title">
                <svg class="card-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="22,12 18,12 15,21 9,3 6,12 2,12"></polyline>
                </svg>
                Atividade Recente
            </div>

            <div class="activity-list" id="activityList">
                <div class="activity-item">
                    <div class="activity-icon">📝</div>
                    <div class="activity-content">
                        <div class="activity-text">Bem-vindo ao Organyze!</div>
                        <div class="activity-time">Hoje</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Preferences Card -->
        <div class="profile-card">
            <div class="card-title">
                <svg class="card-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="3"></circle>
                    <path d="m12 1 1.68 3.36L17 6.64l-1.68 3.36L12 13l-3.32-2.64L6 8.64l2.64-1.68L12 1z"></path>
                </svg>
                Preferências
            </div>

            <div class="preferences-grid">
                <div class="preference-item">
                    <div class="preference-info">
                        <h4>Notificações por E-mail</h4>
                        <p>Receber lembretes de tarefas por e-mail</p>
                    </div>
                    <div class="toggle-switch" id="emailNotifications" onclick="togglePreference('emailNotifications')"></div>
                </div>

                <div class="preference-item">
                    <div class="preference-info">
                        <h4>Tema Escuro</h4>
                        <p>Usar tema escuro na interface</p>
                    </div>
                    <div class="toggle-switch active" id="darkTheme" onclick="togglePreference('darkTheme')"></div>
                </div>

                <div class="preference-item">
                    <div class="preference-info">
                        <h4>Sons de Notificação</h4>
                        <p>Reproduzir sons ao completar tarefas</p>
                    </div>
                    <div class="toggle-switch" id="soundNotifications" onclick="togglePreference('soundNotifications')"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variables
    let currentUserName = null;
    let userStats = {
        totalTasks: 0,
        completedTasks: 0,
        pendingTasks: 0,
        categories: 0
    };

    // Initialize user from localStorage
    function initializeUser() {
        currentUserName = localStorage.getItem('userName');
        
        if (!currentUserName) {
            window.location.href = '/login';
            return;
        }

        document.getElementById('userWelcome').textContent = `Perfil de: ${currentUserName}`;
        document.getElementById('userName').value = currentUserName;
        document.getElementById('profileName').textContent = currentUserName;
        
        // Set avatar initial
        const avatarCircle = document.getElementById('avatarCircle');
        avatarCircle.textContent = currentUserName.charAt(0).toUpperCase();
    }

    // Show error message
    function showError(message) {
        const errorElement = document.getElementById('errorMessage');
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        document.getElementById('successMessage').style.display = 'none';
    }

    // Show success message
    function showSuccess(message) {
        const successElement = document.getElementById('successMessage');
        successElement.textContent = message;
        successElement.style.display = 'block';
        document.getElementById('errorMessage').style.display = 'none';
    }

    // Hide messages
    function hideMessages() {
        document.getElementById('errorMessage').style.display = 'none';
        document.getElementById('successMessage').style.display = 'none';
    }

    // Fetch user statistics
    async function fetchUserStats() {
        try {
            if (!currentUserName) {
                showError('Usuário não identificado');
                return;
            }

            // Fetch tasks
            const tasksUrl = `/api/tasks?user_name=${encodeURIComponent(currentUserName)}`;
            const tasksResponse = await fetch(tasksUrl);
            
            if (tasksResponse.ok) {
                const tasks = await tasksResponse.json();
                userStats.totalTasks = tasks.length;
                userStats.completedTasks = tasks.filter(task => 
                    task.state_name && task.state_name.toLowerCase().includes('concluí')
                ).length;
                userStats.pendingTasks = userStats.totalTasks - userStats.completedTasks;
            }

            // Fetch categories
            const categoriesResponse = await fetch('/api/categories');
            if (categoriesResponse.ok) {
                const categories = await categoriesResponse.json();
                userStats.categories = categories.length;
            }

            updateStatsDisplay();

        } catch (error) {
            console.error('Erro ao carregar estatísticas:', error);
        }
    }

    // Update statistics display
    function updateStatsDisplay() {
        document.getElementById('totalTasksStat').textContent = userStats.totalTasks;
        document.getElementById('completedTasksStat').textContent = userStats.completedTasks;
        document.getElementById('pendingTasksStat').textContent = userStats.pendingTasks;
        document.getElementById('categoriesStat').textContent = userStats.categories;
    }

    // Toggle preference
    function togglePreference(preferenceId) {
        const toggle = document.getElementById(preferenceId);
        toggle.classList.toggle('active');
        
        // Save preference to localStorage
        const isActive = toggle.classList.contains('active');
        localStorage.setItem(preferenceId, isActive);
        
        // Apply theme change if it's the dark theme toggle
        if (preferenceId === 'darkTheme') {
            // Theme is already dark by default, so this is just for demonstration
            showSuccess('Preferência atualizada com sucesso!');
        } else {
            showSuccess('Preferência atualizada com sucesso!');
        }
    }

    // Load preferences from localStorage
    function loadPreferences() {
        const preferences = ['emailNotifications', 'darkTheme', 'soundNotifications'];
        
        preferences.forEach(pref => {
            const saved = localStorage.getItem(pref);
            const toggle = document.getElementById(pref);
            
            if (saved === 'true') {
                toggle.classList.add('active');
            } else if (saved === 'false') {
                toggle.classList.remove('active');
            }
            // If no saved preference, keep default (darkTheme is active by default)
        });
    }

    // Reset form
    function resetForm() {
        document.getElementById('userEmail').value = '';
        hideMessages();
    }

    // Handle form submission
    document.getElementById('profileForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const email = document.getElementById('userEmail').value.trim();
        
        if (email && !isValidEmail(email)) {
            showError('Por favor, insira um e-mail válido.');
            return;
        }

        // Simulate saving (in a real app, this would make an API call)
        setTimeout(() => {
            showSuccess('Perfil atualizado com sucesso!');
        }, 500);
    });

    // Validate email
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // Navigation functions
    function goBack() {
        if (currentUserName) {
            window.location.href = `/home?userName=${encodeURIComponent(currentUserName)}`;
        } else {
            window.location.href = '/login';
        }
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        initializeUser();
        loadPreferences();
        fetchUserStats();
    });
</script>

