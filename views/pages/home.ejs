<style>
    /* Home page specific styles */
    .home-container {
        display: grid;
        grid-template-columns: 1fr 350px;
        gap: 24px;
        padding: 24px;
        height: 100%;
    }

    /* User info */
    .user-info {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 24px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .user-welcome {
        font-size: 18px;
        font-weight: 600;
        color: var(--foreground-color);
    }

    .logout-button {
        background: #dc3545;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
    }

    .logout-button:hover {
        background: #c82333;
    }

    /* Action buttons */
    .action-buttons {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        gap: 16px;
        margin-bottom: 32px;
    }

    .action-button {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 24px;
        color: var(--foreground-color);
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .action-button:hover {
        border-color: var(--primary-color);
        transform: translateY(-2px);
    }

    /* Task sections */
    .task-section {
        margin-bottom: 32px;
    }

    .section-title {
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 16px;
    }

    .task-container {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 20px;
        min-height: 200px;
    }

    .task-item {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 12px 0;
        border-bottom: 1px solid var(--border-color);
    }

    .task-item:last-child {
        border-bottom: none;
    }

    .task-checkbox {
        width: 20px;
        height: 20px;
        border: 2px solid var(--primary-color);
        border-radius: 4px;
        background: transparent;
        cursor: pointer;
        position: relative;
        flex-shrink: 0;
    }

    .task-checkbox.completed {
        background: var(--primary-color);
    }

    .task-checkbox.completed::after {
        content: '✓';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 12px;
        font-weight: bold;
    }

    .task-content {
        flex: 1;
    }

    .task-title {
        font-weight: 500;
        margin-bottom: 4px;
    }

    .task-meta {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .task-tag {
        background: var(--border-color);
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 12px;
    }

    .empty-state {
        text-align: center;
        color: #6b7280;
        padding: 40px 20px;
    }

    /* Debug info */
    .debug-info {
        background: #f0f9ff;
        border: 1px solid #0ea5e9;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 16px;
        font-family: monospace;
        font-size: 12px;
        color: #0c4a6e;
    }

    /* Sidebar widgets */
    .home-sidebar {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }

    .widget {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 20px;
    }

    .widget-title {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 16px;
    }

    /* Calendar */
    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .calendar-nav button {
        background: transparent;
        border: none;
        color: var(--foreground-color);
        cursor: pointer;
        padding: 4px 8px;
        border-radius: 4px;
    }

    .calendar-nav button:hover {
        background: var(--border-color);
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 4px;
    }

    .calendar-day-header {
        text-align: center;
        font-size: 12px;
        color: #9ca3af;
        padding: 8px 4px;
        font-weight: 500;
    }

    .calendar-day {
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s ease;
    }

    .calendar-day:hover {
        background: var(--border-color);
    }

    .calendar-day.today {
        background: var(--primary-color);
        color: white;
        font-weight: 600;
    }

    .calendar-day.other-month {
        color: #6b7280;
    }

    /* Today tasks widget */
    .today-task-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 0;
        border-bottom: 1px solid var(--border-color);
    }

    .today-task-item:last-child {
        border-bottom: none;
    }

    .today-task-checkbox {
        width: 16px;
        height: 16px;
        border: 2px solid var(--primary-color);
        border-radius: 3px;
        background: transparent;
        cursor: pointer;
        flex-shrink: 0;
        position: relative;
    }

    .today-task-checkbox.completed {
        background: var(--primary-color);
    }

    .today-task-checkbox.completed::after {
        content: '✓';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 10px;
        font-weight: bold;
    }

    .today-task-text {
        font-size: 14px;
    }

    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .home-container {
            grid-template-columns: 1fr;
            padding: 16px;
        }

        .action-buttons {
            grid-template-columns: 1fr;
        }

        .home-sidebar {
            order: -1;
        }
    }
</style>

<div class="home-container">
    <div class="content-area">
        <!-- User Info -->
        <div class="user-info">
            <div class="user-welcome" id="userWelcome">Carregando...</div>
            <button class="logout-button" onclick="logout()">Sair</button>
        </div>

        <!-- Debug Info -->
        <div class="debug-info" id="debugInfo" style="display: none;">
            <strong>Debug Info:</strong><br>
            Usuário: <span id="debugUser">-</span><br>
            Total de tarefas: <span id="debugTotal">-</span><br>
            URL da requisição: <span id="debugUrl">-</span>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons">
            <button class="action-button" onclick="createTask()">
                Criar tarefa
            </button>
            <button class="action-button" onclick="createStatus()">
                Criar status
            </button>
            <button class="action-button" onclick="createCategory()">
                Criar categoria
            </button>
        </div>

        <!-- All Tasks Section -->
        <div class="task-section">
            <h2 class="section-title">Todas as Tarefas</h2>
            <div class="task-container" id="allTasks">
                <div class="empty-state">
                    <p>Carregando tarefas...</p>
                </div>
            </div>
        </div>
    </div>

    <div class="home-sidebar">
        <!-- Calendar Widget -->
        <div class="widget">
            <div class="calendar-header">
                <h3 class="widget-title">Calendário</h3>
                <div class="calendar-nav">
                    <button onclick="previousMonth()">&lt;</button>
                    <button onclick="nextMonth()">&gt;</button>
                </div>
            </div>
            <div class="calendar-month-year" id="calendarMonthYear">Junho - 2025</div>
            <div class="calendar-grid" id="calendarGrid">
                <!-- Calendar will be generated by JavaScript -->
            </div>
        </div>

        <!-- Today Tasks Widget -->
        <div class="widget">
            <h3 class="widget-title">Tarefas para hoje</h3>
            <div id="todayTasksList">
                <div class="empty-state">
                    <p>Carregando...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variables
    let currentDate = new Date();
    let todayTasks = [];
    let tomorrowTasks = [];
    let allTasks = [];
    let currentUserName = null;

    // Initialize user from URL parameters or localStorage
    function initializeUser() {
        const urlParams = new URLSearchParams(window.location.search);
        const userNameFromUrl = urlParams.get('userName');
        
        if (userNameFromUrl) {
            currentUserName = decodeURIComponent(userNameFromUrl);
            localStorage.setItem('userName', currentUserName);
        } else {
            currentUserName = localStorage.getItem('userName');
        }

        if (!currentUserName) {
            // Se não há usuário logado, redirecionar para login
            window.location.href = '/login';
            return;
        }

        // Exibir nome do usuário
        document.getElementById('userWelcome').textContent = `Bem-vindo, ${currentUserName}!`;
        
        // Mostrar debug info
        document.getElementById('debugInfo').style.display = 'block';
        document.getElementById('debugUser').textContent = currentUserName;
    }

    // API Functions
    async function fetchTasks() {
        try {
            if (!currentUserName) {
                showError('Usuário não identificado');
                return;
            }

            // Buscar tarefas do usuário específico usando user_name
            const url = `/api/tasks?user_name=${encodeURIComponent(currentUserName)}`;
            document.getElementById('debugUrl').textContent = url;
            
            console.log('Fazendo requisição para:', url);
            
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status}`);
            }
            
            allTasks = await response.json();
            console.log('Tarefas recebidas:', allTasks);
            
            document.getElementById('debugTotal').textContent = allTasks.length;

            const today = new Date();
            const tomorrow = new Date(today);
            tomorrow.setDate(tomorrow.getDate() + 1);

            // Filtrar tarefas por data
            todayTasks = allTasks.filter(task => {
                if (!task.due_date) return false;
                const taskDate = new Date(task.due_date);
                return taskDate.toDateString() === today.toDateString();
            });

            tomorrowTasks = allTasks.filter(task => {
                if (!task.due_date) return false;
                const taskDate = new Date(task.due_date);
                return taskDate.toDateString() === tomorrow.toDateString();
            });

            renderTasks();
            renderTodayTasksList();

        } catch (error) {
            console.error('Erro ao carregar tarefas:', error);
            showError('Erro ao carregar tarefas: ' + error.message);
        }
    }

    function renderTasks() {
        renderTaskSection('allTasks', allTasks, 'Nenhuma tarefa encontrada');
    }

    function renderTaskSection(containerId, tasks, emptyMessage) {
        const container = document.getElementById(containerId);

        if (tasks.length === 0) {
            container.innerHTML = `<div class="empty-state"><p>${emptyMessage}</p></div>`;
            return;
        }

        container.innerHTML = tasks.map(task => {
            const isCompleted = task.state_name && task.state_name.toLowerCase().includes('concluí');
            return `
                <div class="task-item">
                    <div class="task-checkbox ${isCompleted ? 'completed' : ''}" 
                         onclick="toggleTask(${task.id})"></div>
                    <div class="task-content">
                        <div class="task-title">${task.title}</div>
                        <div class="task-meta">
                            ${task.category_name ? `<span class="task-tag">${task.category_name}</span>` : ''}
                            ${task.state_name ? `<span class="task-tag">${task.state_name}</span>` : ''}
                            ${task.due_date ? `<span class="task-tag">${new Date(task.due_date).toLocaleDateString('pt-BR')}</span>` : ''}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    function renderTodayTasksList() {
        const container = document.getElementById('todayTasksList');
        const tasksToShow = todayTasks.length > 0 ? todayTasks : allTasks.slice(0, 5);

        if (tasksToShow.length === 0) {
            container.innerHTML = '<div class="empty-state"><p>Nenhuma tarefa</p></div>';
            return;
        }

        container.innerHTML = tasksToShow.map(task => {
            const isCompleted = task.state_name && task.state_name.toLowerCase().includes('concluí');
            return `
                <div class="today-task-item">
                    <div class="today-task-checkbox ${isCompleted ? 'completed' : ''}" 
                         onclick="toggleTask(${task.id})"></div>
                    <div class="today-task-text">${task.title}</div>
                </div>
            `;
        }).join('');
    }

    // Calendar Functions
    function generateCalendar() {
        const grid = document.getElementById('calendarGrid');
        const monthYear = document.getElementById('calendarMonthYear');

        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();

        // Update month/year display
        const monthNames = [
            'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
            'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
        ];
        monthYear.textContent = `${monthNames[month]} - ${year}`;

        // Clear grid
        grid.innerHTML = '';

        // Add day headers
        const dayHeaders = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
        dayHeaders.forEach(day => {
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day-header';
            dayElement.textContent = day;
            grid.appendChild(dayElement);
        });

        // Get first day of month and number of days
        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();

        // Add empty cells for days before month starts
        for (let i = 0; i < firstDay; i++) {
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day other-month';
            grid.appendChild(dayElement);
        }

        // Add days of the month
        for (let day = 1; day <= daysInMonth; day++) {
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';
            dayElement.textContent = day;

            // Highlight today
            if (year === today.getFullYear() &&
                month === today.getMonth() &&
                day === today.getDate()) {
                dayElement.classList.add('today');
            }

            dayElement.onclick = () => selectDate(year, month, day);
            grid.appendChild(dayElement);
        }
    }

    function previousMonth() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        generateCalendar();
    }

    function nextMonth() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        generateCalendar();
    }

    function selectDate(year, month, day) {
        console.log(`Data selecionada: ${day}/${month + 1}/${year}`);
    }

    // Task Actions
    async function toggleTask(taskId) {
        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Erro ao atualizar tarefa');
            }

            // Recarregar as tarefas após a atualização
            await fetchTasks();

        } catch (error) {
            console.error('Erro ao atualizar tarefa:', error);
            showError('Erro ao atualizar tarefa');
        }
    }

    // Navigation Functions
    function createTask() {
        window.location.href = '/tasks/new';
    }

    function createStatus() {
        window.location.href = '/status/new';
    }

    function createCategory() {
        window.location.href = '/categories/new';
    }

    function logout() {
        localStorage.removeItem('userName');
        window.location.href = '/login';
    }

    // Utility Functions
    function showError(message) {
        console.error(message);
        alert(message);
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function () {
        initializeUser();
        generateCalendar();
        fetchTasks();
    });
</script>

