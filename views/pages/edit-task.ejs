<style>
    /* Edit Task page specific styles */
    .edit-task-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 24px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 32px;
    }

    .page-title {
        font-size: 32px;
        font-weight: 700;
        color: var(--foreground-color);
        margin-bottom: 8px;
    }

    .page-subtitle {
        font-size: 16px;
        color: #6b7280;
    }

    .task-form {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 16px;
        padding: 32px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: var(--foreground-color);
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-input,
    .form-select,
    .form-textarea {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid var(--border-color);
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        background: var(--card-color);
        color: var(--foreground-color);
        box-sizing: border-box;
    }

    .form-input:focus,
    .form-select:focus,
    .form-textarea:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-textarea {
        resize: vertical;
        min-height: 100px;
    }

    .form-select:disabled {
        background-color: #f9fafb;
        color: #6b7280;
        cursor: not-allowed;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
    }

    .submit-button {
        background: linear-gradient(135deg, var(--primary-color) 0%, #4f46e5 100%);
        color: white;
        border: none;
        padding: 14px 32px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        width: 100%;
        margin-top: 8px;
    }

    .submit-button:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    }

    .submit-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .cancel-button {
        background: transparent;
        color: #6b7280;
        border: 2px solid var(--border-color);
        padding: 14px 32px;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        width: 100%;
        margin-top: 12px;
    }

    .cancel-button:hover {
        border-color: #6b7280;
        color: var(--foreground-color);
    }

    .loading-state {
        display: none;
        text-align: center;
        color: var(--primary-color);
        font-weight: 500;
        margin-top: 16px;
    }

    .error-message {
        background: #fee2e2;
        border: 1px solid #fecaca;
        color: #dc2626;
        padding: 12px 16px;
        border-radius: 8px;
        margin-top: 16px;
        display: none;
    }

    .success-message {
        background: #d1fae5;
        border: 1px solid #a7f3d0;
        color: #065f46;
        padding: 12px 16px;
        border-radius: 8px;
        margin-top: 16px;
        display: none;
    }

    .user-info {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 24px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .user-welcome {
        font-size: 16px;
        font-weight: 600;
        color: var(--foreground-color);
    }

    .back-button {
        background: transparent;
        color: var(--primary-color);
        border: none;
        font-size: 14px;
        cursor: pointer;
        text-decoration: underline;
    }

    .back-button:hover {
        color: #4f46e5;
    }

    /* Debug info */
    .debug-info {
        background: #f0f9ff;
        border: 1px solid #0ea5e9;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 16px;
        font-family: monospace;
        font-size: 12px;
        color: #0c4a6e;
    }

    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .edit-task-container {
            padding: 16px;
        }

        .task-form {
            padding: 24px;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .page-title {
            font-size: 28px;
        }
    }
</style>

<div class="edit-task-container">
    <!-- User Info -->
    <div class="user-info">
        <div class="user-welcome" id="userWelcome">Carregando...</div>
        <button class="back-button" onclick="goBack()">← Voltar para Home</button>
    </div>

    <!-- Debug Info -->
    <div class="debug-info" id="debugInfo" style="display: none;">
        <strong>Debug Info:</strong><br>
        Usuário: <span id="debugUser">-</span><br>
        Tarefa ID: <span id="debugTaskId">-</span><br>
        Categorias carregadas: <span id="debugCategories">-</span><br>
        Estados carregados: <span id="debugStates">-</span><br>
        Erros: <span id="debugErrors">-</span>
    </div>

    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">Editar Tarefa</h1>
        <p class="page-subtitle">Edite os detalhes da sua tarefa</p>
    </div>

    <!-- Task Form -->
    <form class="task-form" id="taskForm">
        <div class="form-group">
            <label for="title" class="form-label">Título da Tarefa *</label>
            <input type="text" id="title" name="title" class="form-input" required placeholder="Digite o título da tarefa">
        </div>

        <div class="form-group">
            <label for="description" class="form-label">Descrição</label>
            <textarea id="description" name="description" class="form-textarea" placeholder="Descreva os detalhes da tarefa (opcional)"></textarea>
        </div>

        <div class="form-row">
            <div class="form-group">
                <label for="due_date" class="form-label">Data de Vencimento</label>
                <input type="date" id="due_date" name="due_date" class="form-input">
            </div>

            <div class="form-group">
                <label for="category_id" class="form-label">Categoria</label>
                <select id="category_id" name="category_id" class="form-select" disabled>
                    <option value="">Carregando categorias...</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            <label for="state_id" class="form-label">Estado</label>
            <select id="state_id" name="state_id" class="form-select" disabled>
                <option value="">Carregando estados...</option>
            </select>
        </div>

        <button type="submit" class="submit-button" id="submitButton">
            Salvar Alterações
        </button>

        <button type="button" class="cancel-button" onclick="goBack()">
            Cancelar
        </button>

        <div class="loading-state" id="loadingState">
            Salvando alterações...
        </div>

        <div class="error-message" id="errorMessage"></div>
        <div class="success-message" id="successMessage"></div>
    </form>
</div>

<script>
    // Global variables
    let currentUserName = null;
    let taskId = null;
    let debugErrors = [];

    // Initialize user and task ID
    function initializePage() {
        const urlParams = new URLSearchParams(window.location.search);
        currentUserName = localStorage.getItem('userName');
        
        // Extract task ID from URL path - handle both /tasks/123/edit and /edit?id=123
        const pathParts = window.location.pathname.split('/');
        console.log('URL pathname:', window.location.pathname);
        console.log('Path parts:', pathParts);
        
        // Try to get ID from path (e.g., /tasks/123/edit)
        if (pathParts.includes('tasks')) {
            const taskIndex = pathParts.indexOf('tasks') + 1;
            taskId = pathParts[taskIndex];
        } else {
            // Try to get ID from query parameter (e.g., /edit?id=123)
            taskId = urlParams.get('id');
        }
        
        // If still no ID, try getting from the last part of the path that's not 'edit'
        if (!taskId) {
            for (let i = pathParts.length - 1; i >= 0; i--) {
                if (pathParts[i] && pathParts[i] !== 'edit' && !isNaN(parseInt(pathParts[i]))) {
                    taskId = pathParts[i];
                    break;
                }
            }
        }

        console.log('Extracted task ID:', taskId);

        if (!currentUserName) {
            window.location.href = '/login';
            return;
        }

        if (!taskId || taskId === 'edit') {
            showError('ID da tarefa não encontrado na URL.');
            return;
        }

        document.getElementById('userWelcome').textContent = `Editando tarefa para: ${currentUserName}`;
        document.getElementById('debugInfo').style.display = 'block';
        document.getElementById('debugUser').textContent = currentUserName;
        document.getElementById('debugTaskId').textContent = taskId;

        loadCategories();
        loadStates();
        fetchTaskDetails(taskId);
    }

    // DOM elements
    const categorySelect = document.getElementById('category_id');
    const stateSelect = document.getElementById('state_id');
    const taskForm = document.getElementById('taskForm');
    const submitButton = document.getElementById('submitButton');
    const loadingState = document.getElementById('loadingState');
    const errorMessage = document.getElementById('errorMessage');
    const successMessage = document.getElementById('successMessage');

    // Fetch task details
    async function fetchTaskDetails(id) {
        try {
            console.log('Fazendo requisição para buscar tarefa com ID:', id);
            const response = await fetch(`/api/tasks/${id}`);
            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error('Response error text:', errorText);
                throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
            }
            
            const task = await response.json();
            console.log('Tarefa recebida:', task);
            fillForm(task);
        } catch (error) {
            console.error('Erro ao carregar detalhes da tarefa:', error);
            debugErrors.push(`Detalhes da Tarefa: ${error.message}`);
            document.getElementById('debugErrors').textContent = debugErrors.join("; ");
            showError(`Erro ao carregar detalhes da tarefa: ${error.message}`);
        }
    }

    // Fill form with task data
    function fillForm(task) {
        document.getElementById('title').value = task.title || '';
        document.getElementById('description').value = task.description || '';
        document.getElementById('due_date').value = task.due_date ? new Date(task.due_date).toISOString().split('T')[0] : '';

        // Select category
        if (task.category_id) {
            const interval = setInterval(() => {
                if (categorySelect.options.length > 1) { // Check if categories are loaded
                    categorySelect.value = task.category_id;
                    clearInterval(interval);
                }
            }, 100);
        }

        // Select state
        if (task.state_id) {
            const interval = setInterval(() => {
                if (stateSelect.options.length > 1) { // Check if states are loaded
                    stateSelect.value = task.state_id;
                    clearInterval(interval);
                }
            }, 100);
        }
    }

    // Fetch categories
    async function loadCategories() {
        try {
            const response = await fetch('/api/categories');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const categories = await response.json();
            categorySelect.innerHTML = '<option value="">Selecione uma categoria (opcional)</option>';
            categorySelect.disabled = false;
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                categorySelect.appendChild(option);
            });
            document.getElementById('debugCategories').textContent = categories.length;
        } catch (error) {
            console.error('Erro ao carregar categorias:', error);
            debugErrors.push(`Categorias: ${error.message}`);
            document.getElementById('debugErrors').textContent = debugErrors.join("; ");
            categorySelect.innerHTML = '<option value="">Erro ao carregar categorias</option>';
        }
    }

    // Fetch states
    async function loadStates() {
        try {
            const response = await fetch('/api/states');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const states = await response.json();
            stateSelect.innerHTML = '<option value="">Selecione um estado (opcional)</option>';
            stateSelect.disabled = false;
            states.forEach(state => {
                const option = document.createElement('option');
                option.value = state.id;
                option.textContent = state.name;
                stateSelect.appendChild(option);
            });
            document.getElementById('debugStates').textContent = states.length;
        } catch (error) {
            console.error('Erro ao carregar estados:', error);
            debugErrors.push(`Estados: ${error.message}`);
            document.getElementById('debugErrors').textContent = debugErrors.join("; ");
            stateSelect.innerHTML = '<option value="">Erro ao carregar estados</option>';
        }
    }

    // Show error message
    function showError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        successMessage.style.display = 'none';
    }

    // Show success message
    function showSuccess(message) {
        successMessage.textContent = message;
        successMessage.style.display = 'block';
        errorMessage.style.display = 'none';
    }

    // Hide messages
    function hideMessages() {
        errorMessage.style.display = 'none';
        successMessage.style.display = 'none';
    }

    // Form submission
    taskForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        hideMessages();

        if (!currentUserName) {
            showError('Usuário não identificado. Faça login novamente.');
            return;
        }

        if (!taskId) {
            showError('ID da tarefa não encontrado.');
            return;
        }

        const title = document.getElementById('title').value.trim();
        const description = document.getElementById('description').value.trim();
        const due_date = document.getElementById('due_date').value;
        const category_id = document.getElementById('category_id').value || null;
        const state_id = document.getElementById('state_id').value || null;

        if (!title) {
            showError('O título da tarefa é obrigatório.');
            return;
        }

        const taskData = {
            title,
            description: description || null,
            due_date: due_date || null,
            category_id: category_id ? parseInt(category_id) : null,
            state_id: state_id ? parseInt(state_id) : null,
            user_name: currentUserName // Ensure user_name is sent for update
        };

        console.log('Enviando dados da tarefa para atualização:', taskData);

        // Show loading state
        submitButton.disabled = true;
        loadingState.style.display = 'block';

        try {
            const response = await fetch(`/api/tasks/${taskId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(taskData)
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Erro ao atualizar tarefa');
            }

            const updatedTask = await response.json();
            console.log('Tarefa atualizada:', updatedTask);
            showSuccess('Tarefa atualizada com sucesso!');
            
            // Redirect to home after a short delay
            setTimeout(() => {
                window.location.href = `/home?userName=${encodeURIComponent(currentUserName)}`;
            }, 1500);

        } catch (error) {
            console.error('Erro ao atualizar tarefa:', error);
            showError(error.message || 'Erro ao atualizar tarefa. Tente novamente.');
        } finally {
            // Hide loading state
            submitButton.disabled = false;
            loadingState.style.display = 'none';
        }
    });

    // Navigation functions
    function goBack() {
        if (currentUserName) {
            window.location.href = `/home?userName=${encodeURIComponent(currentUserName)}`;
        } else {
            window.location.href = '/login';
        }
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', initializePage);
</script>


